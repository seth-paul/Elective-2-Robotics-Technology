Elective 2 – Robotics Technology
Laboratory Activity 1: Virtual Robotics Simulation
S.Y. 2024-2025, 2nd Semester
February 23, 2025
Seth Paul C. Babayson
BSECE-4A

One of the key components of the robot(spot) in the simulation is the body structure, 
where it has rigid elements that connect its body parts such as the body, head, and legs (rotary joints). 
It allows for movement abilities, enabling the robot to perform various tasks. 
The other one is the position sensors that provide information about the robot’s joint positions 
where it allows to obtain control and movement precisions. These sensors are represented as joints in the robot’s body. 
As observed during the simulation, the robot has already built-in camera sensors for the robot’s vision. 
It provides vision information to the robot for object recognition.  

All of the components are interrelated, as each sensor communicates, depending on the program, 
to perform certain tasks precisely and automatically. The robot's joints (or the position sensors) 
correspond with its visual inputs depending on what tasks the robot is programmed to do. 
In the position sensors alone, it requires a lot of time to determine the movement precision of the robot. 
If you want the robot to walk smoothly, it must consider parameters such as the speed and torques of each leg, 
how it balances the body of the robot to prevent falling, and the smoothness of how the robot walks. 

In my opinion, this kind of robot can be used for security, inspections, search and rescue, and companionship. 
The design of the robot is somewhat similar to a dog. 
So, this robot also functions similarly to a dog such as personal and home security, police-related inspections 
and also for search and rescue activities, and personal companionship. 

In the program code attached below, the only function that has been removed is the lie_down() function,  
and it is replaced by a new function which is the walk() function. It shows the ability to walk similarly to a dog. 
The sequence of movement of the robot is walk, sit, wave, stand, and walk again.  

.................................................................................................................
/*
 * Copyright 1996-2024 Cyberbotics Ltd.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/*
 * Description:   Simple controller to present the Spot robot.
 */

#include <webots/camera.h>
#include <webots/device.h>
#include <webots/led.h>
#include <webots/motor.h>
#include <webots/robot.h>

#include <math.h>
#include <stdio.h>
#include <stdlib.h>

#define NUMBER_OF_LEDS 8
#define NUMBER_OF_JOINTS 12
#define NUMBER_OF_CAMERAS 5

// Initialize the robot's information
static WbDeviceTag motors[NUMBER_OF_JOINTS];
static const char *motor_names[NUMBER_OF_JOINTS] = {
  "front left shoulder abduction motor",  "front left shoulder rotation motor",  "front left elbow motor",
  "front right shoulder abduction motor", "front right shoulder rotation motor", "front right elbow motor",
  "rear left shoulder abduction motor",   "rear left shoulder rotation motor",   "rear left elbow motor",
  "rear right shoulder abduction motor",  "rear right shoulder rotation motor",  "rear right elbow motor"};

static WbDeviceTag cameras[NUMBER_OF_CAMERAS];
static const char *camera_names[NUMBER_OF_CAMERAS] = {"left head camera", "right head camera", "left flank camera",
                                                      "right flank camera", "rear camera"};
static WbDeviceTag leds[NUMBER_OF_LEDS];
static const char *led_names[NUMBER_OF_LEDS] = {"left top led",          "left middle up led", "left middle down led",
                                                "left bottom led",       "right top led",      "right middle up led",
                                                "right middle down led", "right bottom led"};

static void step() {
  const double time_step = wb_robot_get_basic_time_step();
  if (wb_robot_step(time_step) == -1) {
    wb_robot_cleanup();
    exit(0);
  }
}

// Movement decomposition
static void movement_decomposition(const double *target, double duration) {
  const double time_step = wb_robot_get_basic_time_step();
  const int n_steps_to_achieve_target = duration * 1000 / time_step;
  double step_difference[NUMBER_OF_JOINTS];
  double current_position[NUMBER_OF_JOINTS];

  for (int i = 0; i < NUMBER_OF_JOINTS; ++i) {
    current_position[i] = wb_motor_get_target_position(motors[i]);
    step_difference[i] = (target[i] - current_position[i]) / n_steps_to_achieve_target;
  }

  for (int i = 0; i < n_steps_to_achieve_target; ++i) {
    for (int j = 0; j < NUMBER_OF_JOINTS; ++j) {
      current_position[j] += step_difference[j];
      wb_motor_set_position(motors[j], current_position[j]);
    }
    step();
  }
}


static void stand_up(double duration) {
  const double motors_target_pos[NUMBER_OF_JOINTS] = {-0.1, 0.0, 0.0,   // Front left leg
                                                      0.1,  0.0, 0.0,   // Front right leg
                                                      -0.1, 0.0, 0.0,   // Rear left leg
                                                      0.1,  0.0, 0.0};  // Rear right leg

  movement_decomposition(motors_target_pos, duration);
}

static void sit_down(double duration) {
  const double motors_target_pos[NUMBER_OF_JOINTS] = {-0.20, -0.40, -0.19,  // Front left leg
                                                      0.20,  -0.40, -0.19,  // Front right leg
                                                      -0.40, -0.90, 1.18,   // Rear left leg
                                                      0.40,  -0.90, 1.18};  // Rear right leg

  movement_decomposition(motors_target_pos, duration);
}

static void give_paw() {
  // Stabilize posture
  const double motors_target_pos_1[NUMBER_OF_JOINTS] = {-0.20, -0.30, 0.05,   // Front left leg
                                                        0.20,  -0.40, -0.19,  // Front right leg
                                                        -0.40, -0.90, 1.18,   // Rear left leg
                                                        0.49,  -0.90, 0.80};  // Rear right leg

  movement_decomposition(motors_target_pos_1, 4);

  const double initial_time = wb_robot_get_time();
  while (wb_robot_get_time() - initial_time < 8) {
    wb_motor_set_position(motors[4], 0.2 * sin(2 * wb_robot_get_time()) + 0.6);  // Upperarm movement
    wb_motor_set_position(motors[5], 0.4 * sin(2 * wb_robot_get_time()));        // Forearm movement
    step();
  }
  // Get back in sitting posture
  const double motors_target_pos_2[NUMBER_OF_JOINTS] = {-0.20, -0.40, -0.19,  // Front left leg
                                                        0.20,  -0.40, -0.19,  // Front right leg
                                                        -0.40, -0.90, 1.18,   // Rear left leg
                                                        0.40,  -0.90, 1.18};  // Rear right leg

  movement_decomposition(motors_target_pos_2, 4);
}

static void walk(double duration) {
  const double time_step = wb_robot_get_basic_time_step();
  const int n_steps = duration * 1000 / time_step;

  for (int i = 0; i < n_steps; ++i) {
    double phase = 10.0 * M_PI * i / n_steps;
    
    double positions[NUMBER_OF_JOINTS] = {
      -0.2, -0.2 * sin(phase), -0.13 * sin(phase + (3.1416/2)),   // Front left leg
      0.2, 0.2 * sin(phase), 0.13 * sin(phase + (3.1416/2)),  // Front right leg
      -0.2, 0.2 * sin(phase), 0.13 * sin(phase + (3.1416/2)),   // Rear left leg
      0.2, -0.2 * sin(phase), -0.13 * sin(phase + (3.1416/2))   // Rear right leg
    };
    
    for (int j = 0; j < NUMBER_OF_JOINTS; ++j) {
      wb_motor_set_position(motors[j], positions[j]);
    }
    step();
  }
}

int main(int argc, char **argv) {
  wb_robot_init();

  const double time_step = wb_robot_get_basic_time_step();

  // Get cameras
  for (int i = 0; i < NUMBER_OF_CAMERAS; ++i)
    cameras[i] = wb_robot_get_device(camera_names[i]);

  // enable the two front cameras
  wb_camera_enable(cameras[0], 2 * time_step);
  wb_camera_enable(cameras[1], 2 * time_step);

  // Get the LEDs and turn them on
  for (int i = 0; i < NUMBER_OF_LEDS; ++i) {
    leds[i] = wb_robot_get_device(led_names[i]);
    wb_led_set(leds[i], 1);
  }

  // Get the motors (joints) and set initial target position to 0
  for (int i = 0; i < NUMBER_OF_JOINTS; ++i)
    motors[i] = wb_robot_get_device(motor_names[i]);

  while (true) {
      walk(10.0);
      sit_down(2.0);
      give_paw(4.0);
      stand_up(2.0);
  }

  wb_robot_cleanup();
  return EXIT_FAILURE;
}
.................................................................................................................

